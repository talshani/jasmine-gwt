apply plugin: 'java'
apply plugin: 'gwt-base'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'

configurations {
    deployerJars
}

dependencies {
    // your dependencies

    // to use WebDav protocol on upload
    deployerJars "org.apache.maven.wagon:wagon-webdav-jackrabbit:2.6"
}

gwt {
    minHeapSize = "512M";
    maxHeapSize = "1024M";
}

jar {
    from sourceSets.main.allSource
}

def versionBase = '0.1.1'

// handles releases gracefully
gradle.taskGraph.whenReady {taskGraph ->
    if (taskGraph.hasTask(':release')) {
        version = versionBase
    } else {
        version = versionBase + '-SNAPSHOT'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

def bintrayUser = project.hasProperty('user') ? project.getProperty('user') : '';
def bintrayKey = project.hasProperty('key') ? project.getProperty('key') : '';

bintray {
    user = bintrayUser //this usually comes form gradle.properties file in ~/.gradle
    key = bintrayKey //this usually comes form gradle.properties file in ~/.gradle
    publications = ['mavenJava'] // see publications closure
    pkg { //package will be created if does not exist
        repo = 'maven'
//            userOrg = 'myorg' // an optional organization name when the repo belongs to one of the user's orgs
        name = 'jasmine-gwt-wrapper'
        desc = 'A GWT wrapper for jasmine for testing in browser'
        licenses = ['Apache-2.0']
        labels = ['gwt', 'jasmine', 'testing']
    }
}


def cloudbeesUsername =  project.hasProperty('cloudbeesUsername') ? project.getProperty('cloudbeesUsername') : '';
def cloudbeesPassword = project.hasProperty('cloudbeesPassword') ? project.getProperty('cloudbeesPassword') : '';
def cloudbeesAccountName = 'jasmine-gwt'

uploadArchives {
    repositories {
        mavenDeployer {
            // you might use this configuration not to generate
            // date based artefact names
            // uniqueVersion = false
            def configureAuth = {
                authentication(userName: cloudbeesUsername, password: cloudbeesPassword)
            }
            configuration = configurations.deployerJars
            snapshotRepository(url: "dav:https://repository-${cloudbeesAccountName}.forge.cloudbees.com/snapshot/", configureAuth)
            repository(url: "dav:https://repository-${cloudbeesAccountName}.forge.cloudbees.com/release/", configureAuth)
        }
    }
}